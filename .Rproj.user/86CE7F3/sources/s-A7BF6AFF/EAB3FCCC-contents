#' @title Model-Based Multidimensional Unfolding
#'
#' @description Model-Based Multidimensional Unfolding
#'
#' @param data the data matrix. Entries are binary. Missing entries should be \code{NA}.
#' @param K the dimension of space one wants to project the ideal points onto. Default value is 2.
#' @param delta the pre-specified positive intercept parameter, which determines
#' the probability when the distance is 0. Default value is 1e-1.
#' @param M the positive constant which constrains the norm of estimated ideal points. Default value is 3.
#' @param tol tolerance for termination. When the increment for loglikelihood between two
#' iterations is less than tol, the iteration is terminated. Default value is 1.
#' @param Theta_init staring individual ideal points for optimization
#' @param A_init staring item ideal points for optimization
#' @return The function returns a list with the following components:
#' \describe{
#'   \item{A}{The estimated item ideal points.}
#'   \item{Theta}{The estimated individual ideal points.}
#' }
#'
#' @export
#'
#' @import Rcpp RcppArmadillo mvtnorm stats
#' @useDynLib mmdu, .registration = TRUE
#'
#' @examples
#'
#' @references
munfolding <- function(data,
                       K,
                       delta,
                       M,
                       tol,
                       Theta_init,
                       A_init) {

  # checking input data
  if(missing(data)) stop("\"data\" is missing")
  N <- nrow(data)
  J <- ncol(data)

  data.na <- is.na(data)
  Omega <- 1 - data.na

  uni <- unique(c(data))
  uni <- uni[which(is.na(uni) == FALSE)]
  uni <- sort(uni, decreasing = FALSE)

  num.cat <- length(uni)
  if (num.cat <= 1) stop("only 1 category in \"data\"")
  if (num.cat >= 3) stop("more than 2 categories in \"data\"")

  Y <- data
  Y[Omega = 0] <- 0
  Y[data = uni[1]] <- 0
  Y[data = uni[2]] <- 1

  # checking input K
  if (missing(K)) {
    if (missing(Theta_init) == FALSE) {
      K <- ncol(Theta_init)
    } else if (missing(A_init) == FALSE) {
      K <- ncol(A_init)
    } else K <- 2
  }

  # checking input delta
  if (missing(delta)) {
    delta <- 0.1
  } else if (delta < 0) stop("\"delta\" is negative")

  # checking input M
  if (missing(M)) {
    M <- 3
  } else if (M <= 0.5) {
    warning("\"M\" is less than 0.5")
  } else if (M >= 5) warning("\"M\" is larger than 5")

  # checking input tol
  if (missing(tol)) {
    tol <- 1
  } else if (tol <= 0) {
    stop("\"tol\" is negative")
  }

  # initial values for ideal points
  if (missing(Theta_init)) {
    set.seed(1)
    Theta_init <- rmvnorm(N, mean = rep(0, K))
    Theta_init <- 3 * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
  }
  if (missing(A_init)) {
    set.seed(1)
    A_init <- rmvnorm(J, mean = rep(0, K))
    A_init <- 3 * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
  }
  if ((ncol(Theta_init) != K) | (ncol(A_init) != K))  {
    stop("dimension of \"Theta_init\" or \"A_init\" does not match the given \"K\"")
  }

  # L <- rep(0, 5)
  # tmp <- opti_fn(Theta_init, A_init, delta, Y, Omega, M, eps = 100)
  # L[1] <- tmp$likelihood
  #
  # for(i in 2 : 5) {
  #
  # }

  res <- opti_fn(Theta_init, A_init, delta, Y, Omega, M, eps = tol)
  res
}
