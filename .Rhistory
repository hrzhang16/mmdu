roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
devtools::use_rcpp
devtools::use_rcpp()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::use_rcpp()
devtools::use_rcpp()
devtools::use_rcpp
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::use_rcpp
devtools::use_rcpp()
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
job_id <- 101
delta <- 0.1
K <- 2
K_plus <- 2
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
# opti_fn(Theta_init, A_init, delta, Y, Omega, M)
data <- Y
data[Omega = 0] <- NA
system.time({
res <- munfolding(data)
})
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
Rcpp::sourceCpp('src/fn.cpp')
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
Rcpp::sourceCpp('src/fn.cpp')
job_id <- 101
delta <- 0.1
K <- 2
K_plus <- 2
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
# opti_fn(Theta_init, A_init, delta, Y, Omega, M)
data <- Y
data[Omega = 0] <- NA
system.time({
res <- munfolding(data)
})
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
library(mmdu)
Rcpp::sourceCpp('src/fn.cpp')
job_id <- 101
delta <- 0.1
K <- 2
K_plus <- 2
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
# opti_fn(Theta_init, A_init, delta, Y, Omega, M)
data <- Y
data[Omega = 0] <- NA
system.time({
res <- munfolding(data)
})
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
library(mmdu)
Rcpp::sourceCpp('src/fn.cpp')
job_id <- 1
delta <- 0.1
K <- 2
K_plus <- 2
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
# opti_fn(Theta_init, A_init, delta, Y, Omega, M)
data <- Y
data[Omega = 0] <- NA
data[1] = 3
res <- munfolding(data)
data <- Y
data[Omega = 0] <- NA
data <- Y
data[Omega = 0] <- NA
# data[1] = 3
res <- munfolding(data, K = 3)
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
library(mmdu)
Rcpp::sourceCpp('src/fn.cpp')
job_id <- 1
delta <- 0.1
K <- 2
K_plus <- 3
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
data <- Y
data[Omega = 0] <- NA
system.time({
res <- munfolding(data, A_init)
})
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
system.time({
res <- munfolding(data, A_init = A_init)
})
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
system.time({
res <- munfolding(data, A_init = A_init, K = 2)
})
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(mmdu)
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
library(mmdu)
Rcpp::sourceCpp('src/fn.cpp')
job_id <- 1
delta <- 0.1
K <- 2
K_plus <- 3
C <- 1
M <- 1.5
q <- 1
eps <- 1
J <- ceiling(job_id / 100) * 200
N <- 20 * J
Theta_real <- rmvnorm(N, mean = rep(0, K))
Theta_real <- M * sqrt(runif(N, 0, 1)) * Theta_real / apply(Theta_real, 1, norm, type = "2")
A_real <- rmvnorm(J, mean = rep(0, K))
A_real <- M * sqrt(runif(J, 0, 1)) * A_real / apply(A_real, 1, norm, type = "2")
D_real <- dist_partial(Theta_real, A_real)
Y <- matrix(rbinom(N*J, 1, 2 / (1 + exp(D_real + delta))), N, J)
Omega <- matrix(rbinom(N*J, 1, 1 / (N * J)^(1 - q) ), N, J)
Theta_init <- rmvnorm(N, mean = rep(0, K_plus))
Theta_init <- M * sqrt(runif(N, 0, 1)) * Theta_init / apply(Theta_init, 1, norm, type = "2")
A_init <- rmvnorm(J, mean = rep(0, K_plus))
A_init <- M * sqrt(runif(J, 0, 1)) * A_init / apply(A_init, 1, norm, type = "2")
# opti_fn(Theta_init, A_init, delta, Y, Omega, M)
data <- Y
data[Omega = 0] <- NA
system.time({
res <- munfolding(data, A_init = A_init, delta = 0.2, M = 6)
})
Theta <- res$Theta
A <- res$A
D <- dist_partial(Theta, A)
loss.d <- norm(D - D_real, "F")^2 / (N * J)
loss.d
library(smacof)
# library(munfold)
setwd("~/Dropbox/MDS_Code/MovielensData/ml-100k")
udata = read.csv("u.data", header = FALSE, sep = "")
Y = matrix(0,943,1682)
Omega = matrix(1,943,1682)
for(i in 1:943){Y[i,udata[(udata[,1] == i),2]] = 1}
movie_select = which(apply(Y,2,sum)>=100)
Y <- Y[,movie_select]
Omega <- Omega[,movie_select]
N = 943
J = length(movie_select)
##############indices
rate = vector();for(i in 1:1682){rate[i] = sum(udata[ (udata[,2]==i),3 ])/(length(udata[ (udata[,2]==i),  3 ]))}
uitem = read.csv("u.item", header = FALSE, sep = "|")
release_year = as.numeric(substr(as.character(uitem[,3]),8,11))
release_month = match(substr(as.character(uitem[,3]),4,6),month.abb)
release_date = as.numeric(substr(as.character(uitem[,3]),1,2))
release_date[1373]=4
release = release_year*365+release_month*30+release_date
# the 267th movie are NA!
num.movie_select = apply(Y,2,sum)
user = read.csv("u.user", header = FALSE, sep = "|")
day = (udata$V4/(3600*24)-10123)
time_movie = rep(0,1682);for(i in 1:1682){time_movie[i] = median(  day[(udata[,2]==i)]  )}#/length(day[(udata[,2]==i)])}
time_people = rep(0,943);for(i in 1:943){time_people[i] = median(  day[(udata[,1]==i)]  )}#/length(day[(udata[,1]==i)])}
rate_select = rate[movie_select]
uitem_select = uitem[movie_select,]
release_select = release[movie_select]
release_year_select = release_year[movie_select]
type_select = list();for(i in 1:19){type_select[[i]] = which(uitem_select[,i+5]>=1)}
job_name = names(table(user$V4));occupy = list(); for(i in 1:21){occupy[[i]] = which(user$V4 == job_name[i]) }
time_movie_select = time_movie[movie_select]
num.movie_col = rep(1,J)
num.movie_col[which((num.movie_select>=100)&(num.movie_select<=quantile(num.movie_select,0.25)))] = 1
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.25))&(num.movie_select<=quantile(num.movie_select,0.5)))] = 2
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.5))&(num.movie_select<=quantile(num.movie_select,0.75)))] = 3
num.movie_col[which(num.movie_select>quantile(num.movie_select,0.75))] = 4
release_col = rep(1,J)
release_col[which((release_year_select==1997)|(release_year_select==1998))] = 3
release_col[which((release_year_select==1995)|(release_year_select==1996))] = 2
release_col[which(release_year_select<=1994)] = 1
num.persons_select = apply(Y,1,sum)
num.persons_col = rep(1,N)
num.persons_col[which(num.persons_select<=quantile(num.persons_select,0.25))] = 2
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.25))&(num.persons_select<=quantile(num.persons_select,0.5)))] = 3
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.5))&(num.persons_select<=quantile(num.persons_select,0.75)))] = 4
num.persons_col[which(num.persons_select>quantile(num.persons_select,0.75))] = 5
age_col = rep(1,N)
age_col[which(user[,2]<=20)]=2
gender_col = rep(1,N)
gender_col[which(user[,3]=="M")] = 2
hist(Y)
hist(Omega)
table(Omega)
dim(Y)
release_year_select
num.movie_select
rate_select
uitem_select
job_name
movie_select
uitem_select$V2
movie_name_select
movie_name_select <- uitem_select$V2
movie_name_select
movie_name_select[3]
movie_name_select[4]
as.character(movie_name_select)
N
user[,2]
user
user[, 2]
user[, 3]
udata[1,]
rate_person = vector();for (i in 1 : 943) {rate_person[i] = sum(udata[ (udata[, 1] == i),3 ])/(length(udata[ (udata[, 1] == i),  3 ]))}
rate_person
rate_person = vector();for (i in 1 : 943) {rate_person[i] = sum(udata[(udata[, 1] == i), 3]) / (length(udata[(udata[, 1] == i), 3]))}
rate_person
occupy
user
job_person <- user$V4
job_person
as.character(user$V4)
job_person <- as.character(user$V4)
library(smacof)
# library(munfold)
setwd("~/Dropbox/MDS_Code/MovielensData/ml-100k")
udata = read.csv("u.data", header = FALSE, sep = "")
Y = matrix(0,943,1682)
Omega = matrix(1,943,1682)
for(i in 1:943){Y[i,udata[(udata[,1] == i),2]] = 1}
movie_select = which(apply(Y,2,sum)>=100)
Y <- Y[,movie_select]
Omega <- Omega[,movie_select]
N = 943
J = length(movie_select)
##############indices
rate = vector();for (i in 1 : 1682) {rate[i] = sum(udata[ (udata[, 2]==i),3 ])/(length(udata[ (udata[,2]==i),  3 ]))}
rate_person = vector();for (i in 1 : 943) {rate_person[i] = sum(udata[(udata[, 1] == i), 3]) / (length(udata[(udata[, 1] == i), 3]))}
uitem = read.csv("u.item", header = FALSE, sep = "|")
release_year = as.numeric(substr(as.character(uitem[,3]),8,11))
release_month = match(substr(as.character(uitem[,3]),4,6),month.abb)
release_date = as.numeric(substr(as.character(uitem[,3]),1,2))
release_date[1373]=4
release = release_year*365+release_month*30+release_date
# the 267th movie are NA!
num.movie_select = apply(Y,2,sum)
user = read.csv("u.user", header = FALSE, sep = "|")
day = (udata$V4/(3600*24)-10123)
time_movie = rep(0,1682);for(i in 1:1682){time_movie[i] = median(  day[(udata[,2]==i)]  )}#/length(day[(udata[,2]==i)])}
time_people = rep(0,943);for(i in 1:943){time_people[i] = median(  day[(udata[,1]==i)]  )}#/length(day[(udata[,1]==i)])}
rate_select = rate[movie_select]
uitem_select = uitem[movie_select,]
movie_name_select <- uitem_select$V2
release_select = release[movie_select]
release_year_select = release_year[movie_select]
type_select = list();for(i in 1:19){type_select[[i]] = which(uitem_select[,i+5]>=1)}
job_name = names(table(user$V4));occupy = list(); for(i in 1:21){occupy[[i]] = which(user$V4 == job_name[i]) }
job_person <- as.character(user$V4)
time_movie_select = time_movie[movie_select]
num.movie_col = rep(1,J)
num.movie_col[which((num.movie_select>=100)&(num.movie_select<=quantile(num.movie_select,0.25)))] = 1
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.25))&(num.movie_select<=quantile(num.movie_select,0.5)))] = 2
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.5))&(num.movie_select<=quantile(num.movie_select,0.75)))] = 3
num.movie_col[which(num.movie_select>quantile(num.movie_select,0.75))] = 4
release_col = rep(1,J)
release_col[which((release_year_select==1997)|(release_year_select==1998))] = 3
release_col[which((release_year_select==1995)|(release_year_select==1996))] = 2
release_col[which(release_year_select<=1994)] = 1
num.persons_select = apply(Y,1,sum)
num.persons_col = rep(1,N)
num.persons_col[which(num.persons_select<=quantile(num.persons_select,0.25))] = 2
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.25))&(num.persons_select<=quantile(num.persons_select,0.5)))] = 3
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.5))&(num.persons_select<=quantile(num.persons_select,0.75)))] = 4
num.persons_col[which(num.persons_select>quantile(num.persons_select,0.75))] = 5
age_col = rep(1,N)
age_col[which(user[,2]<=20)]=2
gender_col = rep(1,N)
gender_col[which(user[,3]=="M")] = 2
movielens <- list("data" = Y,
"year_movie" = release_year_select,
"num_movie" = num.movie_select,
"rate_movie" = rate_select,
"name_movie" = as.character(movie_name_select),
"num_person" = num.persons_select,
"age_person" = user[, 2],
"gender_person" = user[, 3],
"rate_person" = rate_person,
"job_person" = job_person)
movielens$num_movie
setwd("~/Dropbox/MDS/MDU_JMLR/code/package")
save(movielens, file = "movielens.Rdata")
roxygen2::roxygenize(package.dir = ".")
setwd("~/Dropbox/MDS/MDU_JMLR/code/package/mmdu")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(mmdu)
attach(movielens)
library(mmdu)
attach(movielens)
invisible(movielens)
?invisible()
?use_data
devtools::use_data
?mmdu
??mmdu
attach(movielens)
attach(movielens.Rdata)
library(mmdu)
attach(movielens.Rdata)
attach(movielens)
usethis::use_data_raw()
library("usethis", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(mmdu)
movielens
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
roxygen2::roxygenize(package.dir = ".")
library(mmdu)
movielens
devtools::check()
setwd("~/Dropbox/MDS_Code/MovielensData/ml-100k")
udata = read.csv("u.data", header = FALSE, sep = "")
Y = matrix(0,943,1682)
Omega = matrix(1,943,1682)
for(i in 1:943){Y[i,udata[(udata[,1] == i),2]] = 1}
movie_select = which(apply(Y,2,sum)>=100)
Y <- Y[,movie_select]
Omega <- Omega[,movie_select]
N = 943
J = length(movie_select)
##############indices
rate = vector();for (i in 1 : 1682) {rate[i] = sum(udata[ (udata[, 2]==i),3 ])/(length(udata[ (udata[,2]==i),  3 ]))}
rate_person = vector();for (i in 1 : 943) {rate_person[i] = sum(udata[(udata[, 1] == i), 3]) / (length(udata[(udata[, 1] == i), 3]))}
uitem = read.csv("u.item", header = FALSE, sep = "|")
release_year = as.numeric(substr(as.character(uitem[,3]),8,11))
release_month = match(substr(as.character(uitem[,3]),4,6),month.abb)
release_date = as.numeric(substr(as.character(uitem[,3]),1,2))
release_date[1373]=4
release = release_year*365+release_month*30+release_date
# the 267th movie are NA!
num.movie_select = apply(Y,2,sum)
user = read.csv("u.user", header = FALSE, sep = "|")
day = (udata$V4/(3600*24)-10123)
time_movie = rep(0,1682);for(i in 1:1682){time_movie[i] = median(  day[(udata[,2]==i)]  )}#/length(day[(udata[,2]==i)])}
time_people = rep(0,943);for(i in 1:943){time_people[i] = median(  day[(udata[,1]==i)]  )}#/length(day[(udata[,1]==i)])}
rate_select = rate[movie_select]
uitem_select = uitem[movie_select,]
movie_name_select <- uitem_select$V2
release_select = release[movie_select]
release_year_select = release_year[movie_select]
type_select = list();for(i in 1:19){type_select[[i]] = which(uitem_select[,i+5]>=1)}
job_name = names(table(user$V4));occupy = list(); for(i in 1:21){occupy[[i]] = which(user$V4 == job_name[i]) }
job_person <- as.character(user$V4)
time_movie_select = time_movie[movie_select]
num.movie_col = rep(1,J)
num.movie_col[which((num.movie_select>=100)&(num.movie_select<=quantile(num.movie_select,0.25)))] = 1
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.25))&(num.movie_select<=quantile(num.movie_select,0.5)))] = 2
num.movie_col[which((num.movie_select>quantile(num.movie_select,0.5))&(num.movie_select<=quantile(num.movie_select,0.75)))] = 3
num.movie_col[which(num.movie_select>quantile(num.movie_select,0.75))] = 4
release_col = rep(1,J)
release_col[which((release_year_select==1997)|(release_year_select==1998))] = 3
release_col[which((release_year_select==1995)|(release_year_select==1996))] = 2
release_col[which(release_year_select<=1994)] = 1
num.persons_select = apply(Y,1,sum)
num.persons_col = rep(1,N)
num.persons_col[which(num.persons_select<=quantile(num.persons_select,0.25))] = 2
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.25))&(num.persons_select<=quantile(num.persons_select,0.5)))] = 3
num.persons_col[which((num.persons_select>quantile(num.persons_select,0.5))&(num.persons_select<=quantile(num.persons_select,0.75)))] = 4
num.persons_col[which(num.persons_select>quantile(num.persons_select,0.75))] = 5
age_col = rep(1,N)
age_col[which(user[,2]<=20)]=2
gender_col = rep(1,N)
gender_col[which(user[,3]=="M")] = 2
movielens <- list("data" = Y,
"year_movie" = release_year_select,
"num_movie" = num.movie_select,
"rate_movie" = rate_select,
"name_movie" = as.character(movie_name_select),
"num_person" = num.persons_select,
"age_person" = user[, 2],
"gender_person" = user[, 3],
"rate_person" = rate_person,
"job_person" = job_person)
save(movielens, file = "movielens.RData")
save(movielens, file = "movielens.RData")
devtools::check()
